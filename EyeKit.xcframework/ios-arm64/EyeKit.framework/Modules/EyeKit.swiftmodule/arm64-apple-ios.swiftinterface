// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios14.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EyeKit
import ARKit
import AVFoundation
import CoreData
@_exported import EyeKit
import Foundation
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
public struct InformationView : SwiftUI.View {
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6EyeKit15InformationViewV4bodyQrvp", 0) ðŸ¦¸
}
public enum DataReader : Swift.Identifiable, Swift.CustomStringConvertible, Swift.Hashable {
  case distance(refreshRate: Swift.Int? = nil)
  case ambientLight(refreshRate: Swift.Int? = nil)
  public var description: Swift.String {
    get
  }
  public var id: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: EyeKit.DataReader, b: EyeKit.DataReader) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Client {
  public static let shared: EyeKit.Client
  public var trackingInProgress: [EyeKit.DataReader : Swift.Bool] {
    get
  }
  @objc deinit
  public func hasConsentedToTracking(for reader: EyeKit.DataReader) -> Swift.Bool
  public func informationView(applicationName: Swift.String? = nil, description: Swift.String? = nil, reader: [EyeKit.DataReader], learnMoreURL: Foundation.URL? = nil, completion: @escaping (Swift.Bool) -> Swift.Void) -> EyeKit.InformationView
  public func informationViewController(applicationName: Swift.String? = nil, description: Swift.String? = nil, reader: [EyeKit.DataReader], learnMoreURL: Foundation.URL? = nil, completion: @escaping (Swift.Bool) -> Swift.Void) -> UIKit.UIViewController
  public func startTracking(_ readers: [EyeKit.DataReader], view: UIKit.UIView? = UIApplication.shared.windows.first?.rootViewController?.view, completion: @escaping (Swift.Result<Swift.Void, EyeKit.EyeKitError>, EyeKit.DataReader?) -> Swift.Void)
  public func stopTracking(for readerToStop: EyeKit.DataReader)
  public func stopTracking()
  public func shareTrackingData(deleteIfSuccessfull: Swift.Bool = true, completion: ((Swift.Result<Swift.Void, EyeKit.EyeKitError>) -> Swift.Void)?)
  public func deleteTrackingData()
  public func trackingDataCount() -> Swift.Int
}
public enum EyeKitError : Foundation.LocalizedError, Swift.Error {
  case noConsentToTrack
  case noViewToAttachForDistanceTracking
  case distanceTrackingIsNotAvailable
  case lightTrackingIsNotAvailable
  case noRefreshRate
  case usageDescription(key: Swift.String)
  case cannotLoadTrackingData
  case httpError(_: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @objc(DataEntry) public class DataEntry : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DataEntry {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<EyeKit.DataEntry>
  @objc @NSManaged dynamic public var data: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
}
extension DataEntry : Swift.Identifiable {
  public typealias ID = Foundation.UUID?
}
